[{"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/reportWebVitals.js":"1","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/index.js":"2","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/App.js":"3","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/components/ＷeatherIcon.js":"4","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/views/WeatherCard.js":"5","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/utils/helpers.js":"6","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/hooks/useWeatherAPI.js":"7","/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/views/WeatherSetting.js":"8"},{"size":362,"mtime":1610352296509,"results":"9","hashOfConfig":"10"},{"size":553,"mtime":1615276735110,"results":"11","hashOfConfig":"10"},{"size":2958,"mtime":1615273198696,"results":"12","hashOfConfig":"10"},{"size":3020,"mtime":1613634028702,"results":"13","hashOfConfig":"10"},{"size":3811,"mtime":1615103629848,"results":"14","hashOfConfig":"10"},{"size":3810,"mtime":1615390142681,"results":"15","hashOfConfig":"10"},{"size":2890,"mtime":1615018336662,"results":"16","hashOfConfig":"10"},{"size":3141,"mtime":1615388701539,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"19ir8p2",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/reportWebVitals.js",[],["39","40"],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/index.js",[],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/App.js",["41"],"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\nimport { getMoment, findLocation } from './utils/helpers';\nimport WeatherCard from './views/WeatherCard';\nimport WeatherSetting from './views/WeatherSetting';\nimport useWeatherAPI from './hooks/useWeatherAPI';\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst AUTHORIZATION_KEY = 'CWB-58F87371-93FB-4EFF-B4E0-63DFB26954F0';\n// const LOCATION_NAME = '大林';\n// const CITY_NAME = '嘉義縣';\n\nconst App = () => {\n  console.log('--- invoke function component. ---');\n  const [currentTheme, setCurrentTheme] = useState('dark');\n  const [currentPage, setCurrentPage] = useState('WeatherCard');\n  const handleCurrentPageChange = (currentPage) => {\n    setCurrentPage(currentPage);\n  }\n  const storageCity = localStorage.getItem('cityName') || '嘉義縣';\n  const [currentCity, setCurrentCity] = useState(storageCity);\n  const currentLocation = useMemo(() => findLocation(currentCity), [currentCity]);\n  const { cityName, locationName, sunriseCityName } = currentLocation;\n  console.log(currentLocation);\n  const moment = useMemo(() => getMoment(sunriseCityName), [sunriseCityName]);\n  const [weatherElement, fetchData] = useWeatherAPI({\n    authorizationKey: AUTHORIZATION_KEY,\n    locationName: locationName,\n    cityName: cityName,\n  });\n  const handleCurrentCityChange = (currentCity) => {\n    setCurrentCity(currentCity);\n  }\n\n  useEffect(() => {\n    // according moment to decide light or dark mode.\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]);\n  \n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      {console.log('*** render, isLoading')}\n      <Container>\n        {currentPage === 'WeatherCard' && (\n          <WeatherCard\n            cityName={cityName}\n            weatherElement={weatherElement}\n            moment={moment}\n            fetchData={fetchData}\n            handleCurrentPageChange={handleCurrentPageChange}\n          />\n        )}\n        {currentPage === 'WeatherSetting' && <WeatherSetting \n          cityName={cityName}\n          handleCurrentCityChange={handleCurrentCityChange}\n          handleCurrentPageChange={handleCurrentPageChange}\n        />}\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n",["42","43"],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/components/ＷeatherIcon.js",[],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/views/WeatherCard.js",["44"],"import React from 'react';\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\nimport WeatherIcon from './../components/ＷeatherIcon';\nimport { ReactComponent as AirFlowIcon } from './../images/airFlow.svg';\nimport { ReactComponent as RainIcon } from './../images/rain.svg';\nimport { ReactComponent as RefreshIcon } from './../images/refresh.svg';\nimport { ReactComponent as LoadingIcon } from './../images/loading.svg';\nimport { ReactComponent as CogIcon } from './../images/cog.svg';\n\nconst Cog = styled(CogIcon)`\n  position: absolute;\n  top: 30px;\n  right: 15px;\n  width: 15px;\n  height: 15px;\n  cursor: pointer;\n`\nconst WeatherCardWrapper = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  background-color: ${({ theme }) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\nconst Location = styled.div`\n  font-size: 28px;\n  color: ${({ theme }) => theme.titleColor};\n  margin-bottom: 20px;\n`;\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 30px;\n`;\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\nconst Temperature = styled.div`\n  color: ${({ theme }) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 20px;\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({ theme }) => theme.textColor};\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')};\n  }\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n\nconst WeatherCard = ({ \n  weatherElement, \n  moment, \n  fetchData, \n  handleCurrentPageChange,\n  cityName,\n}) => {\n  const {\n    locationName,\n    description,\n    windSpeed,\n    temperature,\n    rainPossibility,\n    observationTime,\n    weatherCode,\n    comfortability,\n    isLoading,\n  } = weatherElement;\n  \n  return (\n    <WeatherCardWrapper>\n      <Cog onClick={() => handleCurrentPageChange('WeatherSetting')} />\n      <Location>{cityName}</Location>\n      <Description>{description} {comfortability}</Description>\n      <CurrentWeather>\n        <Temperature>\n          {Math.round(temperature)}<Celsius>°C</Celsius>\n        </Temperature>\n        {/* 將 weatherCode, moment 透過 props 傳入 WeatherIcon */}\n        <WeatherIcon weatherCode={weatherCode} moment={moment} />\n      </CurrentWeather>\n      <AirFlow>\n        <AirFlowIcon />{windSpeed} m/h\n      </AirFlow>\n      <Rain>\n        <RainIcon />{rainPossibility} %\n      </Rain>\n      <Refresh\n        onClick={fetchData}\n        isLoading={isLoading}\n      >\n        最後觀測時間：\n        {new Intl.DateTimeFormat('zh-TW', {\n          hour: 'numeric',\n          minute: 'numeric',\n        }).format(dayjs(observationTime))}\n        {' '}\n        {isLoading ? <LoadingIcon /> : <RefreshIcon />}\n      </Refresh>\n    </WeatherCardWrapper>\n  );\n}\n\nexport default WeatherCard;",["45","46"],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/utils/helpers.js",[],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/hooks/useWeatherAPI.js",[],"/Users/mikiya/Desktop/web/practice/realtime-weather-app/src/views/WeatherSetting.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":38,"nodeType":"53","messageId":"54","endLine":1,"endColumn":49},{"ruleId":"47","replacedBy":"55"},{"ruleId":"49","replacedBy":"56"},{"ruleId":"51","severity":1,"message":"57","line":112,"column":5,"nodeType":"53","messageId":"54","endLine":112,"endColumn":17},{"ruleId":"47","replacedBy":"58"},{"ruleId":"49","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar",["60"],["61"],"'locationName' is assigned a value but never used.",["60"],["61"],"no-global-assign","no-unsafe-negation"]